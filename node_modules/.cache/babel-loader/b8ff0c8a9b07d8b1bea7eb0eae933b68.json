{"ast":null,"code":"import { GET_TASK_LIST_SUCCESS, CREATE_TASK_SUCCESS, EDIT_TASK_SUCCESS, DELETE_TASK_SUCCESS, COMPLETE_TASK } from '../constants';\nconst initialState = {\n  todoList: [],\n  completedList: []\n};\nexport default function todoListReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_TASK_LIST_SUCCESS:\n      {\n        return { ...state,\n          todoList: [...action.payload]\n        };\n      }\n\n    case CREATE_TASK_SUCCESS:\n      {\n        return { ...state,\n          todoList: [...state.todoList, action.payload]\n        };\n      }\n\n    case EDIT_TASK_SUCCESS:\n      {\n        const {\n          id,\n          title,\n          description\n        } = action.payload;\n        const newTodoListData = state.todoList;\n        const taskIndex = state.todoList.findIndex(item => item.id === id);\n        const editedTask = { ...state.todoList[taskIndex],\n          title,\n          description\n        };\n        newTodoListData.splice(taskIndex, 1, editedTask);\n        return { ...state,\n          todoList: [...newTodoListData]\n        };\n      }\n\n    case DELETE_TASK_SUCCESS:\n      {\n        const {\n          id\n        } = action.payload;\n        const newTodoListData = state.todoList;\n        const taskIndex = state.todoList.findIndex(item => item.id === id);\n        newTodoListData.splice(taskIndex, 1);\n        return { ...state,\n          todoList: [...newTodoListData]\n        };\n      }\n\n    case COMPLETE_TASK:\n      {\n        const {\n          completeItem\n        } = action.payload;\n        const newTodoListData = state.todoList;\n        const taskIndex = state.todoList.findIndex(item => item.id === completeItem.id);\n        newTodoListData.splice(taskIndex, 1);\n        return { ...state,\n          todoList: [...newTodoListData],\n          completedList: [completeItem, ...state.completedList]\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/nguyenthibichni/OneDrive/Front-end/ReactJS/Project/todo-redux/src/redux/reducers/todoList.reducer.js"],"names":["GET_TASK_LIST_SUCCESS","CREATE_TASK_SUCCESS","EDIT_TASK_SUCCESS","DELETE_TASK_SUCCESS","COMPLETE_TASK","initialState","todoList","completedList","todoListReducer","state","action","type","payload","id","title","description","newTodoListData","taskIndex","findIndex","item","editedTask","splice","completeItem"],"mappings":"AAAA,SACIA,qBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,EAIIC,mBAJJ,EAKIC,aALJ,QAMS,cANT;AAQE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAGJ,YAAjC,EAA+CK,MAA/C,EAAuD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,qBAAL;AAA4B;AAC1B,eAAO,EACL,GAAGS,KADE;AAELH,UAAAA,QAAQ,EAAE,CACR,GAAGI,MAAM,CAACE,OADF;AAFL,SAAP;AAMD;;AACD,SAAKX,mBAAL;AAA0B;AACxB,eAAO,EACL,GAAGQ,KADE;AAELH,UAAAA,QAAQ,EAAE,CACR,GAAGG,KAAK,CAACH,QADD,EAERI,MAAM,CAACE,OAFC;AAFL,SAAP;AAOD;;AACD,SAAKV,iBAAL;AAAwB;AACtB,cAAM;AAAEW,UAAAA,EAAF;AAAMC,UAAAA,KAAN;AAAaC,UAAAA;AAAb,YAA6BL,MAAM,CAACE,OAA1C;AACA,cAAMI,eAAe,GAAGP,KAAK,CAACH,QAA9B;AACA,cAAMW,SAAS,GAAGR,KAAK,CAACH,QAAN,CAAeY,SAAf,CAA0BC,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYA,EAA/C,CAAlB;AACA,cAAMO,UAAU,GAAG,EACjB,GAAGX,KAAK,CAACH,QAAN,CAAeW,SAAf,CADc;AAEjBH,UAAAA,KAFiB;AAGjBC,UAAAA;AAHiB,SAAnB;AAKAC,QAAAA,eAAe,CAACK,MAAhB,CAAuBJ,SAAvB,EAAkC,CAAlC,EAAqCG,UAArC;AACA,eAAO,EACL,GAAGX,KADE;AAELH,UAAAA,QAAQ,EAAE,CACR,GAAGU,eADK;AAFL,SAAP;AAMD;;AACD,SAAKb,mBAAL;AAA0B;AACxB,cAAM;AAAEU,UAAAA;AAAF,YAASH,MAAM,CAACE,OAAtB;AACA,cAAMI,eAAe,GAAGP,KAAK,CAACH,QAA9B;AACA,cAAMW,SAAS,GAAGR,KAAK,CAACH,QAAN,CAAeY,SAAf,CAA0BC,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYA,EAA/C,CAAlB;AACAG,QAAAA,eAAe,CAACK,MAAhB,CAAuBJ,SAAvB,EAAkC,CAAlC;AACA,eAAO,EACL,GAAGR,KADE;AAELH,UAAAA,QAAQ,EAAE,CACR,GAAGU,eADK;AAFL,SAAP;AAMD;;AACD,SAAKZ,aAAL;AAAoB;AAClB,cAAM;AAAEkB,UAAAA;AAAF,YAAmBZ,MAAM,CAACE,OAAhC;AACA,cAAMI,eAAe,GAAGP,KAAK,CAACH,QAA9B;AACA,cAAMW,SAAS,GAAGR,KAAK,CAACH,QAAN,CAAeY,SAAf,CAA0BC,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYS,YAAY,CAACT,EAA5D,CAAlB;AACAG,QAAAA,eAAe,CAACK,MAAhB,CAAuBJ,SAAvB,EAAkC,CAAlC;AACA,eAAO,EACL,GAAGR,KADE;AAELH,UAAAA,QAAQ,EAAE,CACR,GAAGU,eADK,CAFL;AAKLT,UAAAA,aAAa,EAAE,CACbe,YADa,EAEb,GAAGb,KAAK,CAACF,aAFI;AALV,SAAP;AAUD;;AACD;AAAS;AACP,eAAOE,KAAP;AACD;AAjEH;AAmED","sourcesContent":["import {\r\n    GET_TASK_LIST_SUCCESS,\r\n    CREATE_TASK_SUCCESS,\r\n    EDIT_TASK_SUCCESS,\r\n    DELETE_TASK_SUCCESS,\r\n    COMPLETE_TASK,\r\n  } from '../constants';\r\n  \r\n  const initialState = {\r\n    todoList: [],\r\n    completedList: [],\r\n  };\r\n  \r\n  export default function todoListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case GET_TASK_LIST_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          todoList: [\r\n            ...action.payload,\r\n          ],\r\n        }\r\n      }\r\n      case CREATE_TASK_SUCCESS: {\r\n        return {\r\n          ...state,\r\n          todoList: [\r\n            ...state.todoList,\r\n            action.payload,\r\n          ],\r\n        }\r\n      }\r\n      case EDIT_TASK_SUCCESS: {\r\n        const { id, title, description } = action.payload;\r\n        const newTodoListData = state.todoList;\r\n        const taskIndex = state.todoList.findIndex((item) => item.id === id);\r\n        const editedTask = {\r\n          ...state.todoList[taskIndex],\r\n          title,\r\n          description,\r\n        };\r\n        newTodoListData.splice(taskIndex, 1, editedTask);\r\n        return {\r\n          ...state,\r\n          todoList: [\r\n            ...newTodoListData,\r\n          ],\r\n        }\r\n      }\r\n      case DELETE_TASK_SUCCESS: {\r\n        const { id } = action.payload;\r\n        const newTodoListData = state.todoList;\r\n        const taskIndex = state.todoList.findIndex((item) => item.id === id);\r\n        newTodoListData.splice(taskIndex, 1);\r\n        return {\r\n          ...state,\r\n          todoList: [\r\n            ...newTodoListData,\r\n          ],\r\n        }\r\n      }\r\n      case COMPLETE_TASK: {\r\n        const { completeItem } = action.payload;\r\n        const newTodoListData = state.todoList;\r\n        const taskIndex = state.todoList.findIndex((item) => item.id === completeItem.id);\r\n        newTodoListData.splice(taskIndex, 1);\r\n        return {\r\n          ...state,\r\n          todoList: [\r\n            ...newTodoListData,\r\n          ],\r\n          completedList: [\r\n            completeItem,\r\n            ...state.completedList,\r\n          ],\r\n        }\r\n      }\r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}